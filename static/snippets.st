{1,
{11,
{"Наше все",1,0,"",""},
{2,
{"Общее описание встроенного языка",1,0,"",""},
{7,
{"Операторы и синтаксические конструкции",1,0,"",""},
{2,
{"Для Цикл",1,0,"",""},
{0,
{"Для Индекс",0,0,"Для Индекс ","Для Индекс = 1 По <?> Цикл
	
КонецЦикла;"}
},
{0,
{"Для Индекс",0,0,"Для и ","Для Индекс = 1 По <?> Цикл
	
КонецЦикла;"}
}
},
{3,
{"Для Каждого Цикл",1,0,"",""},
{0,
{"Для",0,0,"Для ","Для Каждого ТекущаяСтрока Из <?> Цикл
	
КонецЦикла;"}
},
{0,
{"Для",0,0,"lkz ","Для Каждого ТекущаяСтрока Из <?> Цикл
	
КонецЦикла;"}
},
{0,
{"Для Каждого",0,0,"Для Каждого ","Для Каждого ТекущаяСтрока Из <?> Цикл
	
КонецЦикла;"}
}
},
{5,
{"Если Тогда ИначеЕсли",1,0,"",""},
{0,
{"Если",0,0,"Если ","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"Если",0,0,"tckb ","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"Если Не",0,0,"Если Не ","Если Не <?> Тогда
	
КонецЕсли;"}
},
{0,
{"Если Ложь",0,0,"Если Ложь ","Если Ложь Тогда
	<?>
КонецЕсли;"}
},
{0,
{"Если Ложь",0,0,"Если л","Если Ложь Тогда
	<?>
КонецЕсли;"}
}
},
{1,
{"Пока Цикл",1,0,"",""},
{0,
{"Пока",0,0,"Пока ","Пока <?> Цикл
	
КонецЦикла;"}
}
},
{4,
{"Попытка Исключение",1,0,"",""},
{0,
{"Попытка",0,0,"Попытка ","Попытка
	<?>
Исключение
	ОтменитьТранзакцию();
	Возврат ОписаниеОшибки();
КонецПопытки;"}
},
{0,
{"Попытка",0,0,"ппк ","Попытка
	<?>
Исключение
	ОтменитьТранзакцию();
	Возврат ОписаниеОшибки();
КонецПопытки;"}
},
{0,
{"ВызватьИсключение",0,0,"ви ","ВызватьИсключение ""<?>"";"}
},
{0,
{"ВызватьИсключениеОписаниеОшибки",0,0,"виоо ","ВызватьИсключение ОписаниеОшибки();"}
}
},
{4,
{"Процедура",1,0,"",""},
{0,
{"Процедура",0,0,"Процедура ","Процедура <?>()
	
	
	
КонецПроцедуры"}
},
{0,
{"Процедура",0,0,"ппп ","Процедура <?>()
	
	
	
КонецПроцедуры"}
},
{0,
{"Инициализировать",0,0,"иниц  ","Процедура Инициализировать(Источник, ТабличнаяЧасть = Неопределено, Расшифровка = Неопределено) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	<?>
	
КонецПроцедуры
"}
},
{0,
{"Клиент + сервер",0,0,"кккссс ","&НаКлиенте
Процедура <?""Имя процедуры"">(Команда)
	
	Результат = <?""Имя процедуры"">НаСервере();
	Если ЭтоОписаниеОшибки(Результат) Тогда
		Сообщить(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция <?""Имя процедуры"">НаСервере()
	
	<?>
	
КонецФункции
"}
}
},
{2,
{"Функция",1,0,"",""},
{0,
{"Функция",0,0,"Функция ","Функция <?>()
	
	
	
КонецФункции"}
},
{0,
{"Функция",0,1,"ффф ","Функция <?>()
	
	
	
КонецФункции"}
}
}
},
{4,
{"Инструкции препроцессора",1,0,"",""},
{0,
{"НаКлиенте",0,0,"ккк ","&НаКлиенте"}
},
{0,
{"НаСервере",0,0,"ссс ","&НаСервере"}
},
{0,
{"НаСервереБезКонтекста",0,0,"сссккк ","&НаСервереБезКонтекста"}
},
{0,
{"Область Инфософт",0,0,"оинфт ","#Область Инфософт
<?>
#КонецОбласти"}
}
}
},
{3,
{"Глобальный контекст",1,0,"",""},
{2,
{"Метаданные",1,0,"",""},
{0,
{"ТекущийРеквизит",0,0,"тр ","ТекущийРеквизит"}
},
{0,
{"ТекущаяТабличнаяЧасть",0,0,"ттч ","ТекущаяТабличнаяЧасть"}
}
},
{1,
{"Функции работы со значениями типа Дата",1,0,"",""},
{0,
{"ТекущаяДата",0,0,"тд ","ТекущаяДата()"}
}
},
{1,
{"Функции работы со значениями типа Тип",1,0,"",""},
{0,
{"ТипЗнч",0,0,"тпз ","ТипЗнч(<?>)"}
}
}
},
{2,
{"Общие объекты",1,0,"",""},
{1,
{"Табличный документ",1,0,"",""},
{0,
{"ТабличныйДокумент",0,0,"тд ","ТабличныйДокумент"}
}
},
{1,
{"Работа с файлами",1,0,"",""},
{1,
{"ДиалогВыбораФайла",1,0,"",""},
{0,
{"ДиалогВыбораФайла",0,0,"двф ","&НаКлиенте
Процедура ИмяФайлаБэкапаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = ""Выберите файл для бэкапа"";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайлаБэкапа;
	ДиалогВыбораФайла.Фильтр = ""Файлы бэкапов(*.bak)|*.xlsx|Все файлы(*.*)|*.*"";
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения(""ИмяФайлаБэкапаЗавершение"", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаБэкапаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено И ВыбранныеФайлы.Количество() Тогда
		ИмяФайлаБэкапа = ВыбранныеФайлы.Получить(0);
	КонецЕсли;
	
КонецПроцедуры
"}
}
}
}
},
{4,
{"Универсальные коллекции значений",1,0,"",""},
{1,
{"Массив",1,0,"",""},
{0,
{"ЭлементМассива",0,0,"эм ","ЭлементМассива"}
}
},
{1,
{"Структура",1,0,"",""},
{0,
{"КлючЗначение",0,0,"кз ","КлючЗначение"}
}
},
{2,
{"СписокЗначений",1,0,"",""},
{0,
{"СписокЗначений",0,0,"сз ","СписокЗначений"}
},
{0,
{"ЭлементСписка",0,0,"эс ","ЭлементСписка"}
}
},
{4,
{"ТаблицаЗначений",1,0,"",""},
{0,
{"ТаблицаЗначений",0,0,"тз ","ТаблицаЗначений"}
},
{0,
{"ТекущаяСтрока",0,0,"тс ","ТекущаяСтрока"}
},
{0,
{"ТекущаяКолонка",0,0,"тк ","ТекущаяКолонка "}
},
{0,
{"НоваяСтрока",0,0,"нс ","НоваяСтрока"}
}
}
},
{0,
{"Интерфейс (управляемый)",1,0,"",""}
},
{1,
{"Прикладные объекты",1,0,"",""},
{1,
{"Внешние обработки и отчеты",1,0,"",""},
{1,
{"ВнешняяОбработка",1,0,"",""},
{0,
{"ИспользуемоеИмяФайла",0,0,"ииф ","ИспользуемоеИмяФайла"}
}
}
}
},
{1,
{"Работа с запросами",1,0,"",""},
{0,
{"Запрос",0,0,"Запрос ","Запрос = Новый Запрос;
Запрос.Текст = 
""<?>"";
Запрос.УстановитьПараметр("""", );
Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
	
КонецЕсли;"}
}
},
{0,
{"Системные наборы значений",1,0,"",""}
},
{0,
{"Системные перечисления",1,0,"",""}
},
{0,
{"Средства интеграции и администрирования",1,0,"",""}
},
{21,
{"Кастомизация",1,0,"",""},
{9,
{"Комментарии",1,0,"",""},
{0,
{"///",0,0,"/// ","////////////////////////////////////////////////////////////////////////////////<?>"}
},
{0,
{"Инфософт",0,0,"инфософт ","// <!-- ИнфоСофт
<?>
// ИнфоСофт -->"}
},
{0,
{"Кинросс",0,0,"Кинросс ","// <!-- ИнфоСофт №78796 Истомин Алексей <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">
<?>
// ИнфоСофт -->"}
},
{0,
{"ЭйБиКрафт",0,0,"абкр ","// <!-- ЭйБиКрафт
<?>
// ЭйБиКрафт -->"}
},
{0,
{"Истомин",0,0,"истомин ","// <!-- ИнфоСофт №<?""Номер заявки""> Истомин Алексей <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">
<?>
// ИнфоСофт -->"}
},
{0,
{"Витапром",0,0,"витапром ","// + витапром <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">
<?>
// - витапром"}
},
{0,
{"Кворк",0,0,"кворк ","//{{кворк <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">
<?>
//}}кворк"}
},
{0,
{"Кворк codejs",0,0,"кворк2 ","//{{kwork codejs <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">
<?>
//}}kwork codejs"}
},
{0,
{"Кастомизация",0,0,"кстм ","//{{кастомизация <?"""", ДатаВремя, ""ДФ=yyyy.MM.dd"">
<?>
//}}кастомизация"}
}
},
{1,
{"Отладка",1,0,"",""},
{0,
{"ПолучитьДанныеТаблицыМенеджераВременныхТаблиц",0,0,"пдтвмвт ","Запрос.МенеджерВременныхТаблиц.Таблицы[""ИмяТаблицы""].ПолучитьДанные().Выгрузить()"}
}
},
{2,
{"СКД",1,0,"",""},
{0,
{"Вывод в таблицу значений",0,0,"скдтз ","СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");

КомпоновщикНастроекНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
КомпоновщикНастроекНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
КомпоновщикНастроекНастройки.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

КомпоновщикНастроекНастройки.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""НачалоПериода"", НачалоДня(ЭтотОбъект.ДатаНачала));
КомпоновщикНастроекНастройки.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""КонецПериода"", КонецДня(ЭтотОбъект.ДатаОкончания));
КомпоновщикНастроекНастройки.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""Организация"", ЭтотОбъект.Организация);

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекНастройки.Настройки, , , Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

ТаблицаЗначений = Новый ТаблицаЗначений;
ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);"}
},
{0,
{"Ввод и вывод таблицы значений",0,0,"скдтз2 ","СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(""СхемаКомпоновкиДанныхОтбора"");
ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

КомпоновщикНастроекНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
КомпоновщикНастроекНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
КомпоновщикНастроекНастройки.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

КомпоновщикНастроекНастройки.Настройки.Отбор.Элементы.Очистить();
Для Каждого ТекущаяСтрока Из НастройкиКомпоновкиДанныхВнеш.Отбор.Элементы Цикл
	ЭлементОтбора = КомпоновщикНастроекНастройки.Настройки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекущаяСтрока.ЛевоеЗначение);
	ЭлементОтбора.ВидСравнения = ТекущаяСтрока.ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = ТекущаяСтрока.ПравоеЗначение;
	ЭлементОтбора.Использование = Истина;
КонецЦикла;

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекНастройки.Настройки, , , Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ВнешнийНаборДанных = Новый Структура(""ПроизвольнаяТаблицаЗначений"", ПроизвольнаяТаблицаЗначений);
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешнийНаборДанных, ДанныеРасшифровки);
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

ТаблицаЗначений = Новый ТаблицаЗначений;
ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);"}
}
},
{6,
{"Описание функций",1,0,"",""},
{0,
{"ПривестиЗначение",0,0,"фпз ","&НаСервереБезКонтекста
Процедура ПривестиЗначение(Приемник, Источник)
	
	Если Не Приемник = Источник Тогда
		Приемник = Источник;
	КонецЕсли;
	
КонецПроцедуры"}
},
{0,
{"СведенияОВнешнейОбработке",0,0,"фсово ","Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	ПараметрыРегистрации.Информация = ЭтотОбъект.Метаданные().Синоним;
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
	ПараметрыРегистрации.Наименование = НСтр(""ru = '"" + ЭтотОбъект.Метаданные().Синоним + ""'"");
	ПараметрыРегистрации.Информация = НСтр(""ru = '"" + ЭтотОбъект.Метаданные().Синоним + ""'"");
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = ЭтотОбъект.Метаданные().Синоним;
	Команда.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	Команда.ПоказыватьОповещение = Истина;
	Команда.Модификатор = ""ПечатьMXL"";
	
	Возврат ПараметрыРегистрации;
	
КонецФункции"}
},
{0,
{"СтрокуТаблицыЗначенийВСтруктуру",0,0,"фстзвс ","&НаСервереБезКонтекста
Функция СтрокуТаблицыЗначенийВСтруктуру(ТекущаяСтрока, Колонки)
	
	Если Ложь Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТекущаяСтрока = ТаблицаЗначений.Получить(0);
		Колонки = ТаблицаЗначений.Колонки;
	Иначе
		Результат = Новый Структура;
	КонецЕсли;
	
	Для Каждого ТекущаяКолонка Из Колонки Цикл
		Результат.Вставить(ТекущаяКолонка.Имя, ТекущаяСтрока[ТекущаяКолонка.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"ЭтаОбработка",0,0,"фмо ","Функция МетаданныеОбработки() Экспорт
	
	ЭтотОбъектМетаданные = ЭтотОбъект.Метаданные();
	
	Результат = Новый Структура;
	Результат.Вставить(""Имя"", ЭтотОбъектМетаданные.Имя);
	Результат.Вставить(""Синоним"", ЭтотОбъектМетаданные.Синоним);
	Результат.Вставить(""ПолноеИмя"", ЭтотОбъектМетаданные.ПолноеИмя());
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"ЭтоОписаниеОшибки",0,0,"фэоо ","&НаСервереБезКонтекста
Функция ЭтоОписаниеОшибки(Значение) Экспорт
	
	Возврат ТипЗнч(Значение) = Тип(""Строка"");
	
КонецФункции"}
},
{0,
{"ЭтотОбъект",0,0,"фэо ","&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение(""Объект"");
	
КонецФункции
"}
}
},
{0,
{"ДокументОбъект",0,0,"до ","ДокументОбъект"}
},
{0,
{"ДокументСсылка",0,0,"дс ","ДокументСсылка"}
},
{0,
{"ДополнительныеПараметры",0,0,"дп ","ДополнительныеПараметры"}
},
{0,
{"КодОшибки",0,0,"ко ","0x<?"""", ДатаВремя, ""ДФ=yyMMddHHmmss"">"}
},
{0,
{"ЗначениеЗаполнено",0,0,"зз ","ЗначениеЗаполнено(<?>)"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"ззс ","ЗаполнитьЗначенияСвойств(<?>)"}
},
{0,
{"КопироватьФайлОбработки",0,0,"кфо ","ИспользуемоеИмяФайла = ИспользуемоеИмяФайла();
Если Не Лев(ИспользуемоеИмяФайла, 5) = ""e1cib"" Тогда
	Попытка
		КопироватьФайл(ИспользуемоеИмяФайла, ИспользуемоеИмяФайла + "".bak"");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецЕсли;"}
},
{0,
{"Номенклатура",0,0,"ннн ","Номенклатура"}
},
{0,
{"ОписаниеОповещения",0,0,"ооо ","ДополнительныеПараметры = Новый Структура;
ОписаниеОповещения = Новый ОписаниеОповещения(""ОписаниеОповещения"", ЭтаФорма, ДополнительныеПараметры);"}
},
{0,
{"ОписаниеОшибки",0,0,"оо ","ОписаниеОшибки()"}
},
{0,
{"Результат",0,0,"рез ","Результат"}
},
{0,
{"СправочникСсылка",0,0,"сс ","СправочникСсылка"}
},
{0,
{"СправочникОбъект",0,0,"со ","СправочникОбъект"}
},
{0,
{"СсылкаНаОбъект",0,0,"сно ","СсылкаНаОбъект"}
},
{0,
{"ТабличнаяЧасть",0,0,"тч ","ТабличнаяЧасть"}
},
{0,
{"ЭтоОписаниеОшибки",0,0,"эээ ","Если ТипЗнч(Результат) = Тип(""Строка"") Тогда
	Сообщить(Результат);
КонецЕсли;"}
},
{0,
{"ЭтотОбъект",0,0,"эо ","ЭтотОбъект"}
}
}
}
}